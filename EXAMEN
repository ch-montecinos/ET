{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax. Perhaps you forgot a comma? (3389716149.py, line 26)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[22]\u001b[39m\u001b[32m, line 26\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31mprint('stock total de la marca: ' marca, \"1\" total, :)\u001b[39m\n          ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m invalid syntax. Perhaps you forgot a comma?\n"
     ]
    }
   ],
   "source": [
    "# TIENDA ONLINE PYBOOKS\n",
    "\n",
    "#productos = {modelo: [marca, pantalla, RAM, disco, GB de DD, procesador, video], ...] \n",
    "productos = {'8475HD': ['HP', 15.6, '8GB', 'DD', '1T', 'Intel Core i5', 'Nvidia GTX1050'],\n",
    " '2175HD': ['lenovo', 14, '4GB', 'SSD', '512GB', 'Intel Core i5', 'Nvidia GTX1050'],\n",
    " 'JjfFHD': ['Asus', 14, '16GB', 'SSD', '256GB', 'Intel Core i7', 'Nvidia RTX2080Ti'],\n",
    " 'fgdxFHD': ['HP', 15.6, '8GB', 'DD', '1T', 'Intel Core i3', 'integrada'],\n",
    " 'GF75HD': ['Asus', 15.6, '8GB', 'DD', '1T', 'Intel Core i7', 'Nvidia GTX1050'],\n",
    " '123FHD': ['lenovo', 14, '6GB', 'DD', '1T', 'AMD Ryzen 5', 'integrada'],\n",
    " '342FHD': ['lenovo', 15.6, '8GB', 'DD', '1T', 'AMD Ryzen 7', 'Nvidia GTX1050'],\n",
    " 'UWU131HD': ['Dell', 15.6, '8GB', 'DD', '1T', 'AMD Ryzen 3', 'Nvidia GTX1050'], \n",
    "\n",
    " }\n",
    "\n",
    "#stock = {modelo: [precio, stock], ...] \n",
    "stock = {'8475HD': [387990,10], '2175HD': [327990,4], 'JjfFHD': [424990,1],\n",
    " 'fgdxFHD': [664990,21], '123FHD': [290890,32], '342FHD': [444990,7],\n",
    " 'GF75HD': [749990,2], 'UWU131HD': [349990,1], 'FS1230HD': [249990,0], \n",
    " }\n",
    "def stock_marca(marca): # OPCION 1.\n",
    "   input('Ingrese marca a consultar: ')\n",
    "   total = 0\n",
    "   for modelo in productos:\n",
    "      if productos(modelo)(0) == marca:\n",
    "         total += stock(modelo)(1)\n",
    "         print('stock total de la marca: ' marca, \"1\" total, :)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "   print('el stock es :')\n",
    "    \n",
    "\n",
    "def busqueda_precio(): # OPCION 2.\n",
    "   try:\n",
    "     int(input('Ingrese precio minimo: '))\n",
    "     int(input('Ingrese precio maximo: '))\n",
    "   except:\n",
    "      print('Debe ingresar valores enteros. ')\n",
    "      return\n",
    "resultados = ()\n",
    "for modelo in stock:\n",
    "     precio = stock\n",
    "       \n",
    "  \n",
    "\n",
    "  \n",
    "     print('No hay notebooks en ese rango de precios. ')\n",
    "\n",
    "\n",
    "\n",
    "def actualizar_precio(): # OPCION 3.\n",
    "   while True:\n",
    "    modelo \n",
    "    input('Ingrese modelo a actualizar: ')\n",
    "\n",
    "    int(input('Ingrese precio nuevo. '))\n",
    "    print('Precio actualixado! ')\n",
    "\n",
    "   \n",
    "\n",
    "# MENU \n",
    "def main():\n",
    "     while True:\n",
    "\n",
    "      print('*** MENU PRINCIPAL ***')\n",
    "      print('1. Stock marca.')\n",
    "      print('2. Búsqueda por precio.')\n",
    "      print('3. Actualizar precio.')\n",
    "      print('4. Salir')\n",
    "\n",
    "      opcion = int(input('Ingrese una opción: '))\n",
    "\n",
    "      if opcion == 1:\n",
    "        stock_marca()\n",
    "      elif opcion == 2:\n",
    "        busqueda_precio()\n",
    "      elif opcion == 3:\n",
    "        actualizar_precio()\n",
    "      elif opcion == 4:\n",
    "          print('Programa Finalizado')\n",
    "          break  \n",
    "      else:\n",
    "          print('Debe seleccionar una opción válida!!')\n",
    "\n",
    " \n",
    "# PARA EJECUTAR \n",
    "main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
